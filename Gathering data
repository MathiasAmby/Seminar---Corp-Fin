{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing relevant packages\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from alpha_vantage.timeseries import TimeSeries\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "import bs4 as bs\n",
    "import pickle\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Getting all SP500 tickers:\n",
    "\n",
    "def save_sp500_tickers():\n",
    "    resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')\n",
    "    soup = bs.BeautifulSoup(resp.text, 'lxml')\n",
    "    table = soup.find('table', {'class': 'wikitable sortable'})\n",
    "    tickers = []\n",
    "    for row in table.findAll('tr')[1:]:\n",
    "        ticker = row.findAll('td')[0].text\n",
    "        tickers.append(ticker)\n",
    "        \n",
    "    with open(\"sp500tickers.pickle\",\"wb\") as f:\n",
    "        pickle.dump(tickers,f)\n",
    "        \n",
    "    return tickers\n",
    "\n",
    "tickers = save_sp500_tickers()\n",
    "tickers = [x[:-1] for x in tickers]\n",
    "\n",
    "#Replacing tickername that creates an error later.\n",
    "tickers = [w.replace('BF.B', 'BF-B') for w in tickers]\n",
    "print(tickers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finding all stock information\n",
    "\n",
    "ETFs = np.array(tickers) # all ETFs used\n",
    "\n",
    "api_key = 'IHXRIDZAXOXUHF8T' # AlphaVantage API key\n",
    "\n",
    "ts = TimeSeries(key = api_key, output_format = 'pandas', indexing_type='date')\n",
    "\n",
    "print(ETFs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "price_data = pd.DataFrame()\n",
    "# Loop through requested securities\n",
    "print('Querying Securities, Estimated time: ' + str(round(len(ETFs)/5)) + ' minutes')\n",
    "for x in range(len(ETFs)):\n",
    "    print(str(ETFs[x]))\n",
    "\n",
    "    if (x + 1) % 5 == 0:\n",
    "        time.sleep(60) # wait 1 minutes after every 5 API calls\n",
    "\n",
    "    data, meta_data = ts.get_monthly_adjusted(symbol=str(ETFs[x])) \n",
    "    data = data['5. adjusted close'].iloc[::-1]             \n",
    "    data = pd.DataFrame(data).rename(index=str, columns={'5. adjusted close' : str(ETFs[x])})\n",
    "    price_data = pd.concat([price_data,data], axis=1, sort=False)\n",
    "    \n",
    "price_data = price_data.iloc[:300].iloc[::-1]\n",
    "\n",
    "plt.plot(price_data)\n",
    "plt.xticks([])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "localdata = price_data.copy()\n",
    "\n",
    "localdata.to_csv(r'C:\\Users\\07anl_000\\Desktop\\Polit - KU\\Kandidat\\3. semester\\Seminar Anv. Corp Fin\\localdata.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
